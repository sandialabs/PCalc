/**
 * Copyright 2009 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government
 * retains certain rights in this software.
 * 
 * BSD Open Source License.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of Sandia National Laboratories nor the names of its
 *      contributors may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package gov.sandia.gmp.baseobjects.globals;

import gov.sandia.gmp.util.globals.Globals;

/**
 * Class responsible for storing & accessing AK135 distance vs. slowness/tt
 * curves and interpolated values from these curves.
 * 
 * @author avencar
 *
 */
public class AK135TTCurves {
	private static String AK135_SLOWNESS_CURVE = "0.00 19.1715 0.25 19.1714 0.75 19.1712 1.25 17.9572 1.75 13.7536 2.25 13.7528 2.75 13.7518 3.25 13.7502 3.75 13.7486 4.25 13.7466 4.75 13.7442 5.25 13.7414 5.75 13.7386 6.25 13.7352 6.75 13.7318 7.25 13.7276 7.75 13.7236 8.25 13.7190 8.75 13.7140 9.25 13.7090 9.75 13.7034 10.25 13.6978 10.75 13.6916 11.25 13.6852 11.75 13.6784 12.25 13.6714 12.75 13.6640 13.25 13.6562 13.75 13.6482 14.25 13.6402 14.75 13.6318 15.25 13.2668 15.75 13.0192 16.25 12.8486 16.75 12.6626 17.25 12.5118 17.75 12.3844 18.25 12.1748 18.75 10.9910 19.25 10.9582 19.75 10.9206 20.25 10.8788 20.75 10.8322 21.25 10.7810 21.75 10.7258 22.25 10.6666 22.75 10.6040 23.25 10.5376 23.75 9.3970 24.25 9.1286 24.75 9.1090 25.25 9.0884 25.75 9.0668 26.25 9.0440 26.75 9.0186 27.25 8.9874 27.75 8.9478 28.25 8.9150 28.75 8.8926 29.25 8.8744 29.75 8.8584 30.25 8.8432 30.75 8.8278 31.25 8.8124 31.75 8.7958 32.25 8.7776 32.75 8.7564 33.25 8.7314 33.75 8.7038 34.25 8.6738 34.75 8.6438 35.25 8.6136 35.75 8.5834 36.25 8.5528 36.75 8.5222 37.25 8.4906 37.75 8.4590 38.25 8.4266 38.75 8.3936 39.25 8.3598 39.75 8.3258 40.25 8.2914 40.75 8.2576 41.25 8.2234 41.75 8.1892 42.25 8.1548 42.75 8.1200 43.25 8.0850 43.75 8.0494 44.25 8.0138 44.75 7.9782 45.25 7.9422 45.75 7.9062 46.25 7.8704 46.75 7.8340 47.25 7.7980 47.75 7.7616 48.25 7.7256 48.75 7.6888 49.25 7.6526 49.75 7.6162 50.25 7.5794 50.75 7.5426 51.25 7.5062 51.75 7.4702 52.25 7.4342 52.75 7.3990 53.25 7.3632 53.75 7.3268 54.25 7.2904 54.75 7.2534 55.25 7.2162 55.75 7.1792 56.25 7.1426 56.75 7.1058 57.25 7.0694 57.75 7.0334 58.25 6.9970 58.75 6.9608 59.25 6.9242 59.75 6.8874 60.25 6.8504 60.75 6.8138 61.25 6.7768 61.75 6.7404 62.25 6.7042 62.75 6.6684 63.25 6.6324 63.75 6.5968 64.25 6.5610 64.75 6.5252 65.25 6.4890 65.75 6.4532 66.25 6.4170 66.75 6.3806 67.25 6.3444 67.75 6.3084 68.25 6.2718 68.75 6.2354 69.25 6.1992 69.75 6.1628 70.25 6.1266 70.75 6.0902 71.25 6.0542 71.75 6.0176 72.25 5.9814 72.75 5.9446 73.25 5.9074 73.75 5.8700 74.25 5.8324 74.75 5.7950 75.25 5.7578 75.75 5.7212 76.25 5.6850 76.75 5.6484 77.25 5.6124 77.75 5.5764 78.25 5.5400 78.75 5.5036 79.25 5.4668 79.75 5.4296 80.25 5.3914 80.75 5.3528 81.25 5.3140 81.75 5.2760 82.25 5.2382 82.75 5.2010 83.25 5.1632 83.75 5.1244 84.25 5.0838 84.75 5.0426 85.25 5.0026 85.75 4.9654 86.25 4.9302 86.75 4.8944 87.25 4.8494 87.75 4.7808 88.25 4.7338 88.75 4.7102 89.25 4.6918 89.75 4.6766 90.25 4.6626 90.75 4.6504 91.25 4.6394 91.75 4.6296 92.25 4.6220 92.75 4.6146 93.25 4.6080 93.75 4.6006 94.25 4.5918 94.75 4.5814 95.25 4.5690 95.75 4.5568 96.25 4.5440 96.75 4.5310 97.25 4.5178 97.75 4.5036 98.25 4.4890 98.75 4.4738 99.25 4.4580 99.75 4.4464 101.00 4.4457 103.00 4.4457 105.00 4.4457 107.00 4.4457 109.00 4.4457 111.00 4.4457 113.00 4.4457 114.75 4.4457 115.50 1.9242 116.25 1.9242 117.75 1.9237 119.25 1.9229 120.75 1.9217 122.25 1.9197 123.75 1.9174 125.25 1.9142 126.75 1.9103 128.25 1.9056 129.75 1.8997 131.25 1.8927 132.75 1.8843 134.25 1.8743 135.75 1.8621 137.25 1.8479 138.75 1.8317 140.25 1.8121 141.75 1.7893 143.25 1.7625 144.75 1.7313 146.25 1.6953 147.75 1.6542 149.25 1.6051 150.75 1.5471 152.25 1.4872 153.75 1.4249 155.25 1.3581 156.75 1.2874 158.25 1.2136 159.75 1.1373 161.25 1.0589 162.75 0.9793 164.25 0.8969 165.75 0.8141 167.25 0.7305 168.75 0.6459 170.25 0.5609 171.75 0.4752 173.25 0.3892 174.75 0.3031 176.25 0.2165 177.75 0.1301 179.25 0.0433 180.00 0.0000 ";
	private static String AK135_TT_CURVE = "0.0 0.0000 0.5 9.5857 1.0 19.1713 1.5 28.1499 2.0 35.0267 2.5 41.9031 3.0 48.7790 3.5 55.6541 4.0 62.5284 4.5 69.4017 5.0 76.2738 5.5 83.1445 6.0 90.0138 6.5 96.8814 7.0 103.7473 7.5 110.6111 8.0 117.4729 8.5 124.3324 9.0 131.1894 9.5 138.0439 10.0 144.8956 10.5 151.7445 11.0 158.5903 11.5 165.4329 12.0 172.2721 12.5 179.1078 13.0 185.9398 13.5 192.7679 14.0 199.5920 14.5 206.4121 15.0 213.2280 15.5 219.8614 16.0 226.3710 16.5 232.7953 17.0 239.1266 17.5 245.3825 18.0 251.5747 18.5 257.6621 19.0 263.1576 19.5 268.6367 20.0 274.0970 20.5 279.5364 21.0 284.9525 21.5 290.3430 22.0 295.7059 22.5 301.0392 23.0 306.3412 23.5 311.6100 24.0 316.3085 24.5 320.8728 25.0 325.4273 25.5 329.9715 26.0 334.5049 26.5 339.0269 27.0 343.5362 27.5 348.0299 28.0 352.5038 28.5 356.9613 29.0 361.4076 29.5 365.8448 30.0 370.2740 30.5 374.6956 31.0 379.1095 31.5 383.5157 32.0 387.9136 32.5 392.3024 33.0 396.6806 33.5 401.0463 34.0 405.3982 34.5 409.7351 35.0 414.0570 35.5 418.3638 36.0 422.6555 36.5 426.9319 37.0 431.1930 37.5 435.4383 38.0 439.6678 38.5 443.8811 39.0 448.0779 39.5 452.2578 40.0 456.4207 40.5 460.5664 41.0 464.6952 41.5 468.8069 42.0 472.9015 42.5 476.9789 43.0 481.0389 43.5 485.0814 44.0 489.1061 44.5 493.1130 45.0 497.1021 45.5 501.0732 46.0 505.0263 46.5 508.9615 47.0 512.8785 47.5 516.7775 48.0 520.6583 48.5 524.5211 49.0 528.3655 49.5 532.1918 50.0 535.9999 50.5 539.7896 51.0 543.5609 51.5 547.3140 52.0 551.0491 52.5 554.7662 53.0 558.4657 53.5 562.1473 54.0 565.8107 54.5 569.4559 55.0 573.0826 55.5 576.6907 56.0 580.2803 56.5 583.8516 57.0 587.4045 57.5 590.9392 58.0 594.4559 58.5 597.9544 59.0 601.4348 59.5 604.8969 60.0 608.3406 60.5 611.7658 61.0 615.1727 61.5 618.5611 62.0 621.9313 62.5 625.2834 63.0 628.6176 63.5 631.9338 64.0 635.2322 64.5 638.5127 65.0 641.7753 65.5 645.0198 66.0 648.2464 66.5 651.4549 67.0 654.6452 67.5 657.8174 68.0 660.9716 68.5 664.1075 69.0 667.2252 69.5 670.3248 70.0 673.4062 70.5 676.4695 71.0 679.5146 71.5 682.5417 72.0 685.5505 72.5 688.5412 73.0 691.5135 73.5 694.4672 74.0 697.4022 74.5 700.3184 75.0 703.2159 75.5 706.0948 76.0 708.9554 76.5 711.7979 77.0 714.6221 77.5 717.4283 78.0 720.2165 78.5 722.9865 79.0 725.7383 79.5 728.4717 80.0 731.1865 80.5 733.8822 81.0 736.5586 81.5 739.2156 82.0 741.8536 82.5 744.4727 83.0 747.0732 83.5 749.6548 84.0 752.2170 84.5 754.7589 85.0 757.2802 85.5 759.7815 86.0 762.2642 86.5 764.7293 87.0 767.1765 87.5 769.6012 88.0 771.9916 88.5 774.3585 89.0 776.7136 89.5 779.0595 90.0 781.3978 90.5 783.7291 91.0 786.0543 91.5 788.3740 92.0 790.6888 92.5 792.9998 93.0 795.3071 93.5 797.6111 94.0 799.9114 94.5 802.2073 95.0 804.4980 95.5 806.7825 96.0 809.0609 96.5 811.3329 97.0 813.5984 97.5 815.8573 98.0 818.1091 98.5 820.3536 99.0 822.5905 99.5 824.8195 100.0 827.0427 102.0 835.9340 104.0 844.8254 106.0 853.7167 108.0 862.6080 110.0 871.4994 112.0 880.3907 114.0 889.2820 115.5 895.9505 115.5 1123.8748 117.0 1126.7611 118.5 1129.6467 120.0 1132.5311 121.5 1135.4136 123.0 1138.2932 124.5 1141.1693 126.0 1144.0406 127.5 1146.9061 129.0 1149.7645 130.5 1152.6141 132.0 1155.4532 133.5 1158.2797 135.0 1161.0911 136.5 1163.8843 138.0 1166.6561 139.5 1169.4036 141.0 1172.1218 142.5 1174.8058 144.0 1177.4496 145.5 1180.0465 147.0 1182.5894 148.5 1185.0707 150.0 1187.4783 151.5 1189.7990 153.0 1192.0298 154.5 1194.1671 156.0 1196.2042 157.5 1198.1353 159.0 1199.9557 160.5 1201.6616 162.0 1203.2499 163.5 1204.7189 165.0 1206.0643 166.5 1207.2854 168.0 1208.3811 169.5 1209.3500 171.0 1210.1913 172.5 1210.9041 174.0 1211.4879 175.5 1211.9425 177.0 1212.2672 178.5 1212.4623 180.0 1212.5273";

	/**
	 * 2D array [0] - distance values (deg) [1] - travel time values (seconds)
	 */
	private static double[][] AK135_DISTANCE_BY_TT_CURVE_ARR;

	/**
	 * 2D array [0] - distance values (deg) [1] - slowness values (sec/deg)
	 */
	private static double[][] AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR;

	// Initialize the arrays statically
	static {
		String[] split = AK135_SLOWNESS_CURVE.split("\\s+");
		AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR = new double[2][split.length / 2];
		int count = 0;
		for (int i = 0; i < split.length; i += 2) {
			AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[0][count] = Double.valueOf(split[i]); // distance
			AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[1][count] = Double.valueOf(split[i + 1]); // slowness
			count++;
		}

		split = AK135_TT_CURVE.split("\\s+");
		AK135_DISTANCE_BY_TT_CURVE_ARR = new double[2][split.length / 2];
		count = 0;
		for (int i = 0; i < split.length; i += 2) {
			AK135_DISTANCE_BY_TT_CURVE_ARR[0][count] = Double.valueOf(split[i]); // distance
			AK135_DISTANCE_BY_TT_CURVE_ARR[1][count] = Double.valueOf(split[i + 1]); // travel time
			count++;
		}
	}

	/**
	 * Reeturns an interpolated distance (deg) for a given slowness (sec/deg)
	 * 
	 * @param slowness
	 * @return
	 */
	public static double getDistanceFromSlo(double slowness) {
		return Globals.interpolate(AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[1], AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[0],
				slowness);
	}

	/**
	 * Returns an interpolated distance (deg) from a given travel time (sec)
	 * 
	 * @param travel_time
	 * @return
	 */
	public static double getDistanceFromTT(double travel_time) {
		return Globals.interpolate(AK135_DISTANCE_BY_TT_CURVE_ARR[1], AK135_DISTANCE_BY_TT_CURVE_ARR[0], travel_time);
	}

	/**
	 * Returns an interpolated travel time (sec) from a given distance (deg)
	 * 
	 * @param distance
	 * @return
	 */
	public static double getTTFromDistance(double distance) {
		return Globals.interpolate(AK135_DISTANCE_BY_TT_CURVE_ARR[0], AK135_DISTANCE_BY_TT_CURVE_ARR[1], distance);
	}

	/**
	 * Returns an interpolated slowness (sec/deg) from a given distance (deg)
	 * 
	 * @param distance
	 * @return
	 */
	public static double getSloFromDistance(double distance) {
		return Globals.interpolate(AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[0], AK135_DISTANCE_BY_SLOWNESS_CURVE_ARR[1],
				distance);
	}

}
